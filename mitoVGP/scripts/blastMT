#!/bin/bash

set -e -o pipefail

#++++                  This script is part of:                    ++++
#++++                        mitoVGP v2.0                         ++++
#++++ The Vertebrate Genomes Project Mitogenome Assembly Pipeline ++++
#++++     Credit: Giulio Formenti gformenti@rockefeller.edu       ++++

if [ -z $1 ]; then

	echo "use $0 -h for help"
	exit 0
elif [ $1 == "-h" ]; then

	cat << EOF

	Usage: '$0 -a assembly -r reference -o output_prefix'

	blastgenomes.sh is used to test for the presence of a mitocontig in Canu genome assembly.

	Required arguments are:
	-s the species name (e.g. Calypte_anna)
	-i the VGP species ID (e.g. bCalAnn1)
	-r the reference sequence fasta file

	Optional arguments are:
	-c if run on cluster. Supported options are:
		SLURM
		None (Default)

EOF

exit 0

fi

printf "\n\n++++ running: blastMT ++++\n\n"

#set options

while getopts "s:i:c:a:r:o:" opt; do

	case $opt in
	
		s)
			SPECIES=$OPTARG
			echo "Species: -s $OPTARG"
			;;
        i)
        	ID=$OPTARG
        	echo "Species ID: -i $OPTARG"
            ;;
		c)
            GRID=$OPTARG
			echo "Cluster: -c $OPTARG"
			;;
		r)
			REF=$OPTARG
			echo "Reference mitocontig: -r $OPTARG"
			;;
		\?)
			echo "ERROR - Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac

printf "\n"

done

if [[  ${GRID} == "SLURM" ]]; then

echo Starting at `date`
echo This is job $SLURM_JOB_ID
echo Running on `hostname`

fi

printf "\n"

#define working directory
W_URL=${SPECIES}/assembly_MT_rockefeller/intermediates
printf "Working directory: $W_URL\n\n"

if [[ -e "${W_URL}/blast/${ID%.*.*}_candidate_mitocontig.txt" ]]; then

	printf "\n\noutput already present: skipping.\n\n"
	exit 0

fi

if ! [[ -e "${W_URL}/blast" ]]; then

	mkdir -p ${W_URL}/blast

fi

makeblastdb -in ${W_URL}/canu/${ID}.contigs.fasta -parse_seqids -dbtype nucl -out ${W_URL}/blast/${ID%.*}.db

#search the putative mitocontig using blastn

blastn -outfmt 6 -query ${W_URL}/reference/${REF%.*}.fasta -db ${W_URL}/blast/${ID%.*}.db -out ${W_URL}/blast/${ID%.*.*}_in.out
sed -i "1iquery_acc.ver\tsubject_acc.ver\t%_identity\talignment_length\tmismatches\tgap_opens\tq.start\tq.end\ts.start\ts.end\tevalue\tbitscore" ${W_URL}/blast/${ID%.*.*}_in.out
cat ${W_URL}/blast/${ID%.*.*}_in.out | column -t > ${W_URL}/blast/${ID%.*.*}.out

rm ${W_URL}/blast/${ID%.*.*}_in.out

printf "\n"

cat ${W_URL}/blast/${ID%.*.*}.out

printf "\n"

awk '{if(NR>1) printf "%.0f", $3 * $4;if(NR>1) print "\t" $2}' ${W_URL}/blast/${ID%.*.*}.out | sort -nr > ${W_URL}/blast/${ID%.*.*}_candidates.ls

grep ">" ${W_URL}/canu/${ID}.contigs.fasta > ${W_URL}/blast/${ID%.*.*}_contig_names.ls

grep -oe ">tig[0-9]*" ${W_URL}/blast/${ID%.*.*}_contig_names.ls | tr -d '>' > ${W_URL}/blast/${ID%.*.*}_tig_IDs.ls

grep -oe "suggestCircular=.*" ${W_URL}/blast/${ID%.*.*}_contig_names.ls | grep -o "[^suggestCircular=].*" > ${W_URL}/blast/${ID%.*.*}_tig_circularity.ls

grep -oe "reads=[0-9]*" ${W_URL}/blast/${ID%.*.*}_contig_names.ls | grep -o "[^reads=].*" > ${W_URL}/blast/${ID%.*.*}_tig_nreads.ls

paste -d '\t,' ${W_URL}/blast/${ID%.*.*}_tig_IDs.ls ${W_URL}/blast/${ID%.*.*}_tig_circularity.ls ${W_URL}/blast/${ID%.*.*}_tig_nreads.ls > ${W_URL}/blast/${ID%.*.*}_tig_IDs_circularity_nreads.ls

printf "\n"

awk 'FNR==NR{a[$1]=$2;next}{if ($2 in a) {print $1 "\t" $2 "\t" a[$2] "\t"}}' ${W_URL}/blast/${ID%.*.*}_tig_IDs_circularity_nreads.ls ${W_URL}/blast/${ID%.*.*}_candidates.ls > ${W_URL}/blast/${ID%.*.*}_candidates_to_circular.ls

awk '{print $2}' ${W_URL}/blast/${ID%.*.*}_candidates_to_circular.ls | sort | uniq -c| awk '{print $2}' > ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_uniq.ls

while read p; do

	awk -v tig="${p}" '{if ($2 == tig) {c+=$1;name=$2;chars=$3}} END{split(chars,b,","); if (b[1] == "yes") {printf c*b[2]*10 "\t" name "\t" c "\t" b[1] "\t" b[2] "\n"}else{printf c*b[2]*10 "\t" name "\t" c "\t" b[1] "\t" b[2] "\n"}}' ${W_URL}/blast/${ID%.*.*}_candidates_to_circular.ls
	
done <${W_URL}/blast/${ID%.*.*}_candidates_to_circular_uniq.ls>${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums.ls

sed -i '1s/^/score\ttig\tidentity*coverage\tis_circular\tread_number\n/' ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums.ls

column -t ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums.ls

sort -nr ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums.ls > ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums_sorted.ls

candidate=$(head -1 ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums_sorted.ls | awk '{print $2}')

head -1 ${W_URL}/blast/${ID%.*.*}_candidates_to_circular_sums_sorted.ls | awk '{print $2}' > ${W_URL}/blast/${ID%.*.*}_candidate_mitocontig.txt

printf "best candidate is probably contig: $candidate\n"
