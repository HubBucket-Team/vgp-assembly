#!/bin/bash

set -e -o pipefail

#++++                  This script is part of:                    ++++
#++++                        mitoVGP v2.2                         ++++
#++++ The Vertebrate Genomes Project Mitogenome Assembly Pipeline ++++
#++++     Credit: Giulio Formenti gformenti@rockefeller.edu       ++++

if [ -z $1 ]; then

	echo "use $0 -h for help"
	exit 0
elif [ $1 == "-h" ]; then

	cat << EOF

	This script (mitoPolish) is used to polish the assembly generated by the script
	mtDNApipe.sh using Canu. It performs two rounds of Arrow/Medaka polishing using the same reads used
	by Canu to generate the assembly. These are retrieved from the raw Pacbio/ONT data
	using information from Canu intermediate files.

	It requires the following software (and their dependencies) installed:
	samtools/1.9, pbmm2/1.0.0, variantCaller/2.2.2, picard/2.18.22, 

	Note: polishing is performed on an existing alignment, and polishing assumes reference
	as linear. Therefore, to avoid spurious (e.g. NUMTs) polishing, only reads from the Canu
	assembly are employed. This results in a lower coverage than that potentially achievable
	if no subsequent short-read polishing is performed, and consequently at least
	30-40x coverage is required to avoid base calling errors in the final consensus.

	Required arguments are:
		-s the species name (e.g. Calypte_anna)
		-i the VGP species ID (e.g. bCalAnn1)
		-n the contig ID identified from the BLAST search by the script blastMT.sh
		-t the number of threads

	Optional arguments are:
		-b use gcpp or variantCaller during polish polishing for 2.0 or earlier chemistry respectively (gcpp/variantCaller default: gcpp)
		-c if run on cluster. Supported options are:
			SLURM
			None (Default)

EOF

exit 0

fi

printf "\n\n++++ running: mitoPolish ++++\n\n"

#set options

while getopts ":a:s:i:c:n:t:v:b:" opt; do

	case $opt in
		a)
			PLATFORM="$OPTARG"
			echo "Long read platform: -a $OPTARG"
			;;
		s)
			SPECIES="$OPTARG"
			echo "Species: -s $OPTARG"
			;;
        i)
        	ID="$OPTARG"
        	echo "Species ID: -i $OPTARG"
            ;;
		c)
            GRID="$OPTARG"
			echo "Cluster: -c $OPTARG"
			;;
		n)
            CONTIG="$OPTARG"
			echo "Contig number: -n $OPTARG"
			;;
		t)
			NPROC="$OPTARG"
			echo "Number of threads: -t $OPTARG" >&2
            ;;
		v)
			VAL="$OPTARG"
			echo "SAM validation stringency: -v $OPTARG" >&2
            ;;
		b)
			CAL="$OPTARG"
			echo "Pacbio variant caller: -b $OPTARG" >&2
            ;;
		\?)
			echo "ERROR - Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac

printf "\n"

done

if [[  ${GRID} == "SLURM" ]]; then

echo Starting at `date`
echo This is job $SLURM_JOB_ID
echo Running on `hostname`

fi

if [[ -z  ${VAL} ]]; then

	VAL="STRICT"

fi

if [[ -z  ${CAL} ]]; then

	CAL="gcpp"

fi


printf "\n"

#define working directory
W_URL=${SPECIES}/${ID}/assembly_MT_rockefeller/intermediates
printf "Working directory: $W_URL\n\n"

if [[ -e "${W_URL}/polish/polish_round2/${ID}.${CONTIG}_polish2.fasta" ]]; then

	printf "\n\noutput already present: skipping.\n\n"
	exit 0

fi

if ! [[ -e "${W_URL}/polish" ]]; then

	mkdir -p ${W_URL}/polish

fi

printf "\n--First round of polishing:\n\n"

if ! [[ -e "${W_URL}/polish/polish_round1" ]]; then

	mkdir -p ${W_URL}/polish/polish_round1

	#retrieve the names of Pacbio reads used in Canu assembly
	awk '$2 == "'$(echo "${CONTIG}" | sed -e 's/tig0*//g' -e 's/tig0*//g')'" {print $1}' ${W_URL}/canu/${ID}.contigs.layout.readToTig > ${W_URL}/polish/polish_round1/${ID}_${CONTIG}_IDs.txt

	gunzip -c ${W_URL}/canu/${ID}.trimmedReads.fasta.gz > ${W_URL}/polish/polish_round1/${ID}.trimmedReads.fasta

	READS=$(grep -c ">" ${W_URL}/polish/polish_round1/${ID}.trimmedReads.fasta)

	printf "$READS reads were trimmed by Canu\n"

	while read IDs; do grep -A 1 "id=\b${IDs}\b" ${W_URL}/polish/polish_round1/${ID}.trimmedReads.fasta; done < ${W_URL}/polish/polish_round1/${ID}_${CONTIG}_IDs.txt > ${W_URL}/polish/polish_round1/${ID}.trimmedReads.${CONTIG}.fasta

	grep -o -P '(?<=>)(\S*)' ${W_URL}/polish/polish_round1/${ID}.trimmedReads.${CONTIG}.fasta | uniq -u > ${W_URL}/polish/polish_round1/${ID}_${CONTIG}_names.txt

	READS_AS_U=$(wc -l ${W_URL}/polish/polish_round1/${ID}_${CONTIG}_names.txt | awk '{print $1}')

	printf "of which $READS_AS_U were used in the assembly of contig ${CONTIG}\n"

	sed ':a;N;/>/!s/\n//;ta;P;D' ${W_URL}/canu/${ID}.contigs.fasta | grep -A1 "${CONTIG} " > ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta

	if [[ ${PLATFORM} == "pacbio" ]]; then

		pbmm2 index ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta.mmi 
	
		dataset create --type SubreadSet --name ${ID} ${W_URL}/polish/polish_round1/${ID}_read_set.xml ${W_URL}/tgs_bam/*.subreads.bam
	
		pbmerge ${W_URL}/polish/polish_round1/${ID}_read_set.xml -o ${W_URL}/polish/polish_round1/BAM1.bam
	
		picard RevertSam I=${W_URL}/polish/polish_round1/BAM1.bam O=${W_URL}/polish/polish_round1/uBAM1.bam MAX_DISCARD_FRACTION=0.005 ATTRIBUTE_TO_CLEAR=XT ATTRIBUTE_TO_CLEAR=XN ATTRIBUTE_TO_CLEAR=AS ATTRIBUTE_TO_CLEAR=OC ATTRIBUTE_TO_CLEAR=OP SORT_ORDER=unsorted RESTORE_ORIGINAL_QUALITIES=true REMOVE_DUPLICATE_INFORMATION=true REMOVE_ALIGNMENT_INFORMATION=true VALIDATION_STRINGENCY=${VAL}
	
		pbmm2 align --best-n 1 ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta.mmi ${W_URL}/polish/polish_round1/uBAM1.bam ${W_URL}/polish/polish_round1/${ID}.realigned_raw_reads.bam -j ${NPROC}

		if ! [[ -e "${W_URL}/polish/polish_round1/picard" ]]; then

			mkdir -p ${W_URL}/polish/polish_round1/picard

		fi

		#extract reads used by Canu using their names
		samtools view -H ${W_URL}/polish/polish_round1/${ID}.realigned_raw_reads.bam | sed "s/SO:UNKNOWN/SO:unknown/g" | samtools reheader - ${W_URL}/polish/polish_round1/${ID}.realigned_raw_reads.bam > ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh.bam
		picard FilterSamReads I=${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh.bam O=${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}.bam READ_LIST_FILE=${W_URL}/polish/polish_round1/${ID}_${CONTIG}_names.txt FILTER=includeReadList VALIDATION_STRINGENCY=${VAL}

		#polish polishing using only reads from the Canu assembly
		samtools faidx ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta

		samtools sort -@ ${NPROC} ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}.bam -o ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam

		rm ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}.bam  

		pbindex ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam
	
		samtools index ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam
	
		echo "${CAL} ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam -r ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta -o ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta --algorithm=arrow -j ${NPROC}"
	
		${CAL} ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam -r ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta -o ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta --algorithm=arrow -j ${NPROC}

	else

		zcat ${W_URL}/tgs_MT_extracted_reads/*${ID}.fastq.gz | grep -A3 -f ${W_URL}/polish/polish_round1/${ID}_${CONTIG}_names.txt --no-group-separator > ${W_URL}/polish/polish_round1/${ID}.fastq
		
		minimap2 -x map-ont ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta ${W_URL}/polish/polish_round1/${ID}.fastq -t ${NPROC} -o ${W_URL}/polish/polish_round1/${ID}.paf --secondary=no

		racon ${W_URL}/polish/polish_round1/${ID}.fastq ${W_URL}/polish/polish_round1/${ID}.paf ${W_URL}/polish/polish_round1/${ID}.${CONTIG}.fasta -m 8 -x -6 -g -8 -w 500  -t ${NPROC} > ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta 
	
	fi


fi

printf "\n--First round completed.\n"

printf "\n--Second round of polishing:\n\n"

if ! [[ -e "${W_URL}/polish/polish_round2" ]]; then

	if [[ ${PLATFORM} == "pacbio" ]]; then
	
		picard RevertSam I=${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_sorted.bam O=${W_URL}/polish/polish_round1/uBAM2.bam MAX_DISCARD_FRACTION=0.005 ATTRIBUTE_TO_CLEAR=XT ATTRIBUTE_TO_CLEAR=XN ATTRIBUTE_TO_CLEAR=AS ATTRIBUTE_TO_CLEAR=OC ATTRIBUTE_TO_CLEAR=OP SORT_ORDER=unsorted RESTORE_ORIGINAL_QUALITIES=true REMOVE_DUPLICATE_INFORMATION=true REMOVE_ALIGNMENT_INFORMATION=true VALIDATION_STRINGENCY=${VAL}
		
		pbmm2 index ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta.mmi 
		pbmm2 align --best-n 1 ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta.mmi ${W_URL}/polish/polish_round1/uBAM2.bam ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl.bam -j ${NPROC}

		samtools faidx ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta

		samtools sort -@ ${NPROC} ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl.bam -o ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl_sorted.bam

		rm ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl.bam

		pbindex ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl_sorted.bam

		samtools index ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl_sorted.bam

		mkdir -p ${W_URL}/polish/polish_round2

		${CAL} ${W_URL}/polish/polish_round1/picard/${ID}.realigned_raw_reads_rh_${CONTIG}_pl_sorted.bam -r ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta -o ${W_URL}/polish/polish_round2/${ID}.${CONTIG}_polish2.fasta --algorithm=arrow -j ${NPROC}


	else

		medaka_consensus -i ${W_URL}/polish/polish_round1/${ID}.fastq -d ${W_URL}/polish/polish_round1/${ID}.${CONTIG}_polish.fasta -o ${W_URL}/polish/polish_round2/${ID}.${CONTIG}_polished -t ${NPROC}

		mv ${W_URL}/polish/polish_round2/${ID}.${CONTIG}_polished/consensus.fasta ${W_URL}/polish/polish_round2/${ID}.${CONTIG}_polish2.fasta
	
	fi

fi

printf "\n--Second round completed.\n"
