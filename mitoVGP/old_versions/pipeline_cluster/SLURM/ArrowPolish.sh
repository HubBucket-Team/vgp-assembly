#!/bin/bash

set -e

if [ -z $1 ]; then

	echo "use $0 -h for help"
	exit 0
elif [ $1 == "-h" ]; then

	cat << EOF

	this script (ArrowPolish.sh) is used to polish the assembly generated by the script
	mtDNApipe.sh using Canu. It performs two rounds of Arrow polishing using the same reads used
	by Canu to generate the assembly. These are retrieved from the raw Pacbio data
	using information from Canu intermediate files.

	it requires the following software (and their dependencies) installed:
	samtools/1.7, pbalign/0.3.1, variantCaller/2.2.2, picard/2.18.22

	for picard to work, it requires the absolute file to the jar to be defined in the code.

	note: Arrow polishing is performed on an existing alignment, and Arrow assumes reference
	as linear. Therefore, to avoid spurious (e.g. NUMTs) polishing, only reads from the Canu
	assembly are employed. This results in a lower coverage than that potentially achievable
	if no subsequent short-read polishing is performed, and consequently at least
	30-40x coverage is required to avoid sequence errors in the final consensus.

	required positional arguments are:	Required arguments are:
		-s the species name (e.g. Calypte_anna)
		-i the VGP species ID (e.g. bCalAnn1)
		-n the contig ID identified from the BLAST search by the script mtDNApipe.sh
		-t the number of threads

	Optional arguments are:	
		-c if run on cluster. Supported options are:
			SLURM
			None (Default)

EOF

exit 0

fi

#set options

while getopts ":s:i:c:n:t:" opt; do

printf "\n"

	case $opt in
		s)
			SPECIES=$OPTARG
			echo "Species: -s $OPTARG"
			;;
        i)
        	ID=$OPTARG
        	echo "Species ID: -i $OPTARG"
            ;;
		c)
            GRID=$OPTARG
			echo "Cluster: -c $OPTARG"
			;;
		n)
            CONTIG=$OPTARG
			echo "Contig number: -n $OPTARG"
			;;
		t)
			NPROC=$OPTARG
			echo "Number of threads: -t $OPTARG" >&2
            ;;
		\?)
			echo "ERROR - Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac

printf "\n"

done

if [[  ${GRID} == "SLURM" ]]; then

echo Starting at `date`
echo This is job $SLURM_JOB_ID
echo Running on `hostname`

fi

#define working directory
W_URL=${SPECIES}/assembly_MT/intermediates

if ! [[ -e "${W_URL}/arrow" ]]; then

mkdir -p ${W_URL}/arrow

fi

if ! [[ -e "${W_URL}/arrow/arrow_round1" ]]; then

mkdir -p ${W_URL}/arrow/arrow_round1

#retrieve the names of Pacbio reads used in Canu assembly
awk '$2 == "'${CONTIG}'" {print $1}' ${W_URL}/canu/${ID}.contigs.layout.readToTig > ${W_URL}/arrow/arrow_round1/${ID}_contig${CONTIG}_IDs.txt

gunzip -c ${W_URL}/canu/${ID}.trimmedReads.fasta.gz > ${W_URL}/arrow/arrow_round1/${ID}.trimmedReads.fasta

READS=$(grep -c ">" ${W_URL}/arrow/arrow_round1/${ID}.trimmedReads.fasta)

echo "$READS reads were trimmed by Canu"

while read IDs; do grep -A 1 "id=\b$IDs\b" ${W_URL}/arrow/arrow_round1/${ID}.trimmedReads.fasta; done < ${W_URL}/arrow/arrow_round1/${ID}_contig${CONTIG}_IDs.txt > ${W_URL}/arrow/arrow_round1/${ID}.trimmedReads.contig${CONTIG}.fasta

grep -o -P '(?<=>)(\S*)' ${W_URL}/arrow/arrow_round1/${ID}.trimmedReads.contig${CONTIG}.fasta | uniq -u > ${W_URL}/arrow/arrow_round1/${ID}_contig${CONTIG}_names.txt

READS_AS_U=$(grep -c "m" ${W_URL}/arrow/arrow_round1/${ID}_contig${CONTIG}_names.txt)

echo "of which $READS_AS_U were used in the assembly of contig ${CONTIG}"

sed ':a;N;/>/!s/\n//;ta;P;D' ${W_URL}/canu/${ID}.contigs.fasta | grep -A1 ">tig0*${CONTIG} " > ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}.fasta

#generate bam file of all Pacbio reads
for i in ${W_URL}/pacbio_bam/*.subreads.bam; do pbindex $i; done

dataset create --type SubreadSet --name ${ID} ${W_URL}/arrow/arrow_round1/${ID}_read_set.xml ${W_URL}/pacbio_bam/*.subreads.bam
blasr --bestn 1 ${W_URL}/arrow/arrow_round1/${ID}_read_set.xml ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}.fasta --bam --out ${W_URL}/arrow/arrow_round1/${ID}.realigned_raw_reads.bam --nproc ${NPROC}

if ! [[ -e "${W_URL}/arrow/arrow_round1/picard" ]]; then

mkdir -p ${W_URL}/arrow/arrow_round1/picard

fi

#extract reads used by Canu using their names
samtools view -H ${W_URL}/arrow/arrow_round1/${ID}.realigned_raw_reads.bam | sed "s/SO:UNKNOWN/SO:unknown/g" | samtools reheader - ${W_URL}/arrow/arrow_round1/${ID}.realigned_raw_reads.bam > ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh.bam
java -jar /rugpfs/fs0/vgl/store/gformenti/bin/picard.jar FilterSamReads I=${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh.bam O=${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}.bam READ_LIST_FILE=${W_URL}/arrow/arrow_round1/${ID}_contig${CONTIG}_names.txt FILTER=includeReadList VALIDATION_STRINGENCY=STRICT

#Arrow polishing using only reads from the Canu assembly
samtools faidx ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}.fasta

samtools sort ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}.bam -o ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_sorted.bam

rm ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}.bam  

pbindex ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_sorted.bam

variantCaller -j8 ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_sorted.bam -r ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}.fasta -o ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}_arrow.fasta --algorithm=arrow --numWorkers ${NPROC}

fi

if ! [[ -e "${W_URL}/arrow/arrow_round2" ]]; then

echo "pbalign --bestn 1 ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_sorted.bam ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}_a
rrow.fasta --bam --out ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl.bam --nproc ${NPROC}"

#second round of Arrow polishing
blasr --bestn 1 ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_sorted.bam ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}_arrow.fasta --bam --out ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl.bam --nproc ${NPROC}

samtools faidx ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}_arrow.fasta

samtools sort ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl.bam -o ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl_sorted.bam

rm ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl.bam

pbindex  ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl_sorted.bam

mkdir -p ${W_URL}/arrow/arrow_round2

variantCaller -j8 ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl_sorted.bam -r ${W_URL}/arrow/arrow_round1/${ID}.contig${CONTIG}_arrow.fasta -o ${W_URL}/arrow/arrow_round2/${ID}.contig${CONTIG}_arrow2.fasta --algorithm=arrow --numWorkers ${NPROC}

#generate a final alignment
pbalign --maxHits 1 ${W_URL}/arrow/arrow_round1/picard/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl_sorted.bam ${W_URL}/arrow/arrow_round2/${ID}.contig${CONTIG}_arrow2.fasta ${W_URL}/arrow/arrow_round2/${ID}.realigned_raw_reads_rh_contig${CONTIG}_pl2.bam --nproc ${NPROC}

fi
