#!/bin/bash

set -e -o pipefail

#++++                  This script is part of:                    ++++
#++++                        mitoVGP v2.1                         ++++
#++++ The Vertebrate Genomes Project Mitogenome Assembly Pipeline ++++
#++++     Credit: Giulio Formenti gformenti@rockefeller.edu       ++++

if [ -z $1 ]; then

	echo "use $0 -h for help"
	exit 0
elif [ $1 == "-h" ]; then

	cat << EOF

	This script allows to generate a trimmed version of the Canu mitocontig after short read
	polishing (map10x1.sh). The resulting contig has 100 bp overlapping ends on both sides.
	The script is still experimental.

	It requires the following software (and their dependencies) installed:
	bowtie2/2.1.0, samtools/1.7, mummer/3.23

	Required arguments are:
		-s the species name (e.g. Calypte_anna)
		-i the VGP species ID (e.g. bCalAnn1)
		-n the contig ID identified from the BLAST search by the script blastMT.sh
		-t the number of threads

	Optional arguments are:	
		-c if run on cluster. Supported options are:
			SLURM
			None (Default)

EOF

exit 0

fi

printf "\n\n++++ running: trimmer ++++\n\n"

#set options

while getopts ":s:i:n:c:t:s:z:" opt; do

	case $opt in
		s)
			SPECIES=$OPTARG
			echo "Species: -s $OPTARG"
			;;
        i)
        	ID=$OPTARG
        	echo "Species ID: -i $OPTARG"
            ;;
		n)
            CONTIG=$OPTARG
			echo "Contig number: -n $OPTARG"
			;;
		c)
            GRID=$OPTARG
			echo "Cluster: -c $OPTARG"
			;;
		t)
			NPROC=$OPTARG
			echo "Number of threads: -t $OPTARG" >&2
            ;;
		z)
			SEN=$OPTARG
			echo "Mummer sensitivity: -z $OPTARG" >&2
            ;;
		\?)
			echo "ERROR - Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
	
printf "\n"

done

if [[  ${GRID} == "SLURM" ]]; then

echo Starting at `date`
echo This is job $SLURM_JOB_ID
echo Running on `hostname`

fi

printf "\n"

#define working directory
W_URL=${SPECIES}/${ID}/assembly_MT_rockefeller/intermediates
printf "Working directory: $W_URL\n\n"

FNAME="${ID}.${CONTIG}_arrow2_10x1"

if [[ -e "${W_URL}/trimmed/${FNAME}_trim1.fasta" ]]; then

	printf "\n\noutput already present: skipping.\n\n"
	exit 0

fi

if [[ -z ${SEN} ]]; then

	SEN=500

fi

CONTIG_NAME=$(cat ${W_URL}/freebayes_round1/${FNAME}.fasta | awk '$0 ~ ">" {print substr($0,2)}')



if ! [[ -e "${W_URL}/trimmed" ]]; then

	mkdir ${W_URL}/trimmed
	
	cp ${W_URL}/freebayes_round1/${FNAME}.fasta ${W_URL}/trimmed/intermediate.fasta

	sed -i '2 s/^\(.\{4\}\)./\1/' ${W_URL}/trimmed/intermediate.fasta
	
	samtools sort -@ ${NPROC} -n ${W_URL}/bowtie2_round1/aligned_${ID}_all_sorted.bam -o ${W_URL}/trimmed/aligned_${ID}_all_paired.bam
	samtools fastq -@ ${NPROC} ${W_URL}/trimmed/aligned_${ID}_all_paired.bam -1 ${W_URL}/trimmed/aligned_${ID}_all_1.fq -2 ${W_URL}/trimmed/aligned_${ID}_all_2.fq -s ${W_URL}/trimmed/aligned_${ID}_all_s.fq
	bowtie2-build --threads ${NPROC} ${W_URL}/trimmed/intermediate.fasta ${W_URL}/trimmed/${ID} -q
	bowtie2 -x ${W_URL}/trimmed/${ID} -1 ${W_URL}/trimmed/aligned_${ID}_all_1.fq -2 ${W_URL}/trimmed/aligned_${ID}_all_2.fq -p ${NPROC} --no-mixed | samtools view -bSF4 - > "${W_URL}/trimmed/realigned_${ID}_all.bam"
	samtools sort -@ ${NPROC} ${W_URL}/trimmed/realigned_${ID}_all.bam -o ${W_URL}/trimmed/realigned_${ID}_all_sorted.bam -@ ${NPROC}
	samtools index -@ ${NPROC} ${W_URL}/trimmed/realigned_${ID}_all_sorted.bam
	printf "\n"

fi

if ! [[ -e "${W_URL}/trimmed/${FNAME}.delta" ]]; then

	nucmer --maxmatch --nosimplify ${W_URL}/trimmed/intermediate.fasta ${W_URL}/trimmed/intermediate.fasta -f -p "${W_URL}/trimmed/${FNAME}" -b ${SEN}

fi

NUCMER_OUT=$(show-coords "${W_URL}/trimmed/${FNAME}.delta" -lrcTHo | grep "BEGIN" | head -1)

if ! [[ -z ${NUCMER_OUT} ]]; then

	BEGIN1=$(echo $NUCMER_OUT | awk '{print $1}')
	BEGIN2=$(echo $NUCMER_OUT | awk '{print $2}')
	END1=$(echo $NUCMER_OUT | awk '{print $3}')

	printf "1st iteration\n"

	printf "\n"
	show-coords "${W_URL}/trimmed/${FNAME}.delta" -lrcTHo
	printf "\n"

	printf "BEGIN1: ${BEGIN1}\n"
	printf "BEGIN2: ${BEGIN2}\n"
	printf "END1: ${END1}\n"
	printf "\n"

	CONTIG_NEW=${W_URL}/trimmed/intermediate.fasta

	if (( ${BEGIN2} > ${END1} )); then

		echo ">${FNAME}" > "${W_URL}/trimmed/${FNAME}_new.fasta" & grep -v ">" ${W_URL}/trimmed/intermediate.fasta | tr -d '\n' | cut -c${BEGIN1}-${BEGIN2} >> "${W_URL}/trimmed/${FNAME}_new.fasta"

		nucmer --maxmatch --nosimplify "${W_URL}/trimmed/${FNAME}_new.fasta" "${W_URL}/trimmed/${FNAME}_new.fasta" -f -p "${W_URL}/trimmed/${FNAME}" -b ${SEN}

		CONTIG_NEW="${W_URL}/trimmed/${FNAME}_new.fasta"

		NUCMER_OUT=$(show-coords "${W_URL}/trimmed/${FNAME}.delta" -lrcTHo | grep "BEGIN" | head -1)
		BEGIN1=$(echo $NUCMER_OUT | awk '{print $1}')
		BEGIN2=$(echo $NUCMER_OUT | awk '{print $2}')
		END1=$(echo $NUCMER_OUT | awk '{print $3}')
		
		printf "2nd iteration\n"

		printf "\n"
		show-coords "${W_URL}/trimmed/${FNAME}.delta" -lrcTHo
		printf "\n"
	
		printf "BEGIN1: ${BEGIN1}\n"
		printf "BEGIN2: ${BEGIN2}\n"
		printf "END1: ${END1}\n"
	
	fi

	if (( ${BEGIN2} > ${END1} )); then

		echo ">${FNAME}" > "${W_URL}/trimmed/${FNAME}_new2.fasta" & grep -v ">" ${W_URL}/trimmed/${FNAME}_new.fasta | tr -d '\n' | cut -c${BEGIN1}-${BEGIN2} >> "${W_URL}/trimmed/${FNAME}_new2.fasta"

		nucmer --maxmatch --nosimplify "${W_URL}/trimmed/${FNAME}_new2.fasta" "${W_URL}/trimmed/${FNAME}_new2.fasta" -f -p "${W_URL}/trimmed/${FNAME}_2" -b ${SEN}

		CONTIG_NEW="${W_URL}/trimmed/${FNAME}_new2.fasta"

		NUCMER_OUT=$(show-coords "${W_URL}/trimmed/${FNAME}_2.delta" -lrcTHo | grep "BEGIN" | head -1)
		BEGIN1=$(echo $NUCMER_OUT | awk '{print $1}')
		BEGIN2=$(echo $NUCMER_OUT | awk '{print $2}')
		END1=$(echo $NUCMER_OUT | awk '{print $3}')
	
		printf "\n"
		printf "3nd iteration\n"

		printf "\n"
		show-coords "${W_URL}/trimmed/${FNAME}_2.delta" -lrcTHo	
		printf "\n"

		printf "BEGIN1: ${BEGIN1}\n"
		printf "BEGIN2: ${BEGIN2}\n"
		printf "END1: ${END1}\n"
	
	fi

	END2=$(echo $NUCMER_OUT | awk '{print $4}')
	MIDDLE="$(( ${BEGIN2} + 1 ))-$(( ${END1} - 1 ))"

	printf "END2: ${END2}\n"
	printf "MIDDLE: ${MIDDLE}\n"
	printf "\n"

	echo ">${FNAME}" > "${W_URL}/trimmed/${FNAME}.fasta" & grep -v ">" ${CONTIG_NEW} | tr -d '\n' | cut -c${MIDDLE} >> "${W_URL}/trimmed/${FNAME}.fasta"

	echo ">${FNAME}_begin_${BEGIN1}-${BEGIN2}" > "${W_URL}/trimmed/${FNAME}_ends.fasta" & grep -v ">" ${CONTIG_NEW} | tr -d '\n' | cut -c${BEGIN1}-${BEGIN2} >> "${W_URL}/trimmed/${FNAME}_ends.fasta"
	echo ">${FNAME}_end_${END1}-${END2}" >> "${W_URL}/trimmed/${FNAME}_ends.fasta" & grep -v ">" ${CONTIG_NEW} | tr -d '\n' | cut -c${END1}-${END2} >> "${W_URL}/trimmed/${FNAME}_ends.fasta"

	arrCOV1=($(samtools depth -aa -r ${CONTIG_NAME}:${BEGIN1}-${BEGIN2} --reference ${CONTIG_NEW} ${W_URL}/trimmed/realigned_${ID}_all_sorted.bam | awk '{print $3}'))
	arrCOV2=($(samtools depth -aa -r ${CONTIG_NAME}:${END1}-${END2} --reference ${CONTIG_NEW} ${W_URL}/trimmed/realigned_${ID}_all_sorted.bam | awk '{print $3}'))

	if ! [[ -e "${W_URL}/trimmed/${FNAME}_ends_aligned.fasta" ]]; then
		
		printf "\n"
		muscle -in ${W_URL}/trimmed/${FNAME}_ends.fasta -out ${W_URL}/trimmed/${FNAME}_ends_aligned.fasta

	fi

	if ! [[ -e "${W_URL}/trimmed/${FNAME}_ends_aligned.table" ]]; then

		NAM1=$(cat ${W_URL}/trimmed/${FNAME}_ends_aligned.fasta | awk '/^[>;]/ { if (seq) { print seq }; seq=""; print } /^[^>;]/ { seq = seq $0 } END { print seq }' | awk 'NR==1')
		SEQ1=$(cat ${W_URL}/trimmed/${FNAME}_ends_aligned.fasta | awk '/^[>;]/ { if (seq) { print seq }; seq=""; print } /^[^>;]/ { seq = seq $0 } END { print seq }' | awk 'NR==2')
		NAM2=$(cat ${W_URL}/trimmed/${FNAME}_ends_aligned.fasta | awk '/^[>;]/ { if (seq) { print seq }; seq=""; print } /^[^>;]/ { seq = seq $0 } END { print seq }' | awk 'NR==3')
		SEQ2=$(cat ${W_URL}/trimmed/${FNAME}_ends_aligned.fasta | awk '/^[>;]/ { if (seq) { print seq }; seq=""; print } /^[^>;]/ { seq = seq $0 } END { print seq }' | awk 'NR==4')

		arrSEQ1=($(fold -w1 <<< "$SEQ1"))
		arrSEQ2=($(fold -w1 <<< "$SEQ2"))

		printf "%s\n" ${NAM1} > ${W_URL}/trimmed/${FNAME}_ends_aligned_1.table
		printf "%s\n" "${arrSEQ1[@]}" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_1.table

		COUNTER=0

		while read i;
			do
				if [ "$i" == ${NAM1} ]; then
					printf "%s\t%s\n" ${NAM1} "Cov" > ${W_URL}/trimmed/${FNAME}_ends_aligned_1_with_cov.table
				elif [ "$i" == "-" ]; then
					printf "%s\t%s\n" "$i" "NA" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_1_with_cov.table
				else
					printf "%s %s\n" "$i" "${arrCOV1[$COUNTER]}" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_1_with_cov.table
					let COUNTER=COUNTER+1	
				fi
			done < ${W_URL}/trimmed/${FNAME}_ends_aligned_1.table

		printf "%s\n" $NAM2 > ${W_URL}/trimmed/${FNAME}_ends_aligned_2.table
		printf "%s\n" "${arrSEQ2[@]}" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_2.table

		COUNTER=0

		while read i;
			do
				if [ "$i" == ${NAM2} ]; then
					printf "%s\t%s\n" ${NAM2} "Cov" > ${W_URL}/trimmed/${FNAME}_ends_aligned_2_with_cov.table
				elif [ "$i" == "-" ]; then
					printf "%s\t%s\n" "$i" "NA" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_2_with_cov.table
				else
					printf "%s %s\n" "$i" "${arrCOV2[$COUNTER]}" >> ${W_URL}/trimmed/${FNAME}_ends_aligned_2_with_cov.table
					let COUNTER=COUNTER+1
				fi
			done < ${W_URL}/trimmed/${FNAME}_ends_aligned_2.table

		paste ${W_URL}/trimmed/${FNAME}_ends_aligned_1_with_cov.table ${W_URL}/trimmed/${FNAME}_ends_aligned_2_with_cov.table > ${W_URL}/trimmed/${FNAME}_ends_aligned.table

	fi

	S=""

	COUNTER=0

	arrN1=( $(awk 'FNR == 1 {next} {print $1}' ${W_URL}/trimmed/${FNAME}_ends_aligned.table) )
	arrQ1=( $(awk 'FNR == 1 {next} {print $2}' ${W_URL}/trimmed/${FNAME}_ends_aligned.table) )
	arrN2=( $(awk 'FNR == 1 {next} {print $3}' ${W_URL}/trimmed/${FNAME}_ends_aligned.table) )
	arrQ2=( $(awk 'FNR == 1 {next} {print $4}' ${W_URL}/trimmed/${FNAME}_ends_aligned.table) )

	while [  $COUNTER -lt ${#arrN1[@]} ]
		do
			N1=${arrN1[$COUNTER]}
			Q1=${arrQ1[$COUNTER]}
			N2=${arrN2[$COUNTER]}
			Q2=${arrQ2[$COUNTER]}
			VER=$COUNTER
			if [  ${N1} == ${N2} ]; then
				S="${S}${N1}"
			elif [  ${N1} == "-" ]; then
				while [  ${arrN1[${VER}]} == "-" ]; do
					if [[ ${arrQ1[$VER-1]} == ?(-)+([0-9]) ]] && (( ${arrQ1[$VER-1]} > ${Q2} )); then
					:
					elif [[ ${arrQ1[$VER-1]} == ?(-)+([0-9]) ]] && (( ${arrQ1[$VER-1]} < ${Q2} )); then
						S="${S}${N2}"
					fi			
					let VER-=1
				done
			elif [  ${N2} == "-" ]; then
				while [  ${arrN2[$VER]} == "-" ]; do
					if [[ ${arrQ2[$VER-1]} == ?(-)+([0-9]) ]] && (( ${arrQ2[$VER-1]} > ${Q1} )); then
					:
					elif [[ ${arrQ2[$VER-1]} == ?(-)+([0-9]) ]] && (( ${arrQ2[$VER-1]} < ${Q1} )); then
						S="${S}${N1}"
					fi			
					let VER-=1
				done
			elif [  ${N1} != "-" ] && [  ${N1} != ${N2} ]; then
					if ((  ${Q1} > ${Q2} )); then
						S="${S}${N1}"
					else
						S="${S}${N2}"
					fi				
			fi
		
			let COUNTER=COUNTER+1
		
		done

else

	printf "\nWARNING: the sequence does not appear to be circular\n\n"
	show-coords "${W_URL}/trimmed/${FNAME}.delta" -lrcTHo
	printf "\n\nUsing: ${W_URL}/freebayes_round1/${FNAME}.fasta\n\n"
	grep ">" ${W_URL}/freebayes_round1/${FNAME}.fasta > ${W_URL}/trimmed/${FNAME}.fasta
	grep -v ">" ${W_URL}/freebayes_round1/${FNAME}.fasta | tr -d '\n' >> ${W_URL}/trimmed/${FNAME}.fasta
	
fi

sed -i "$ s/$/$S/" ${W_URL}/trimmed/${FNAME}.fasta

printf "$(sed -n 1p ${W_URL}/trimmed/${FNAME}.fasta)\n$(sed -n 2p ${W_URL}/trimmed/${FNAME}.fasta | cut -c$(( $(sed -n 2p ${W_URL}/trimmed/${FNAME}.fasta | tr -d '\n' | wc -c) - 100 ))-$(sed -n 2p ${W_URL}/trimmed/${FNAME}.fasta | tr -d '\n' | wc -c))$(sed -n 2p ${W_URL}/trimmed/${FNAME}.fasta)$(sed -n 2p ${W_URL}/trimmed/${FNAME}.fasta | cut -c1-100)" > ${W_URL}/trimmed/${FNAME}_trim1.fasta