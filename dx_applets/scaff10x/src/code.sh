#!/bin/bash
# scaff10x 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -x -e -o pipefail 
main() {

    echo "Value of assemble_genome_fastagz: '$assemble_genome_fastagz'"
    echo "Value of scaff_R1_fastqgz: '${scaff_R1_fastqgz[@]}'"
    echo "Value of scaff_R2_fastqgz: '${scaff_R2_fastqgz[@]}'"
    echo "Value of mapper_choice: '$mapper_choice'"
    echo "Value of mapper_file: '$mapper_file'"
    echo "Value of alignment_option: '$alignment_option'"
    echo "Value of break10x_option: '$break10x_option'"

    # download & unpacked

    dx download "$assemble_genome_fastagz" -o "$assemble_genome_fastagz_name"
    if [[ "$assemble_genome_fastagz_name" =~ \.gz$ ]]; then
      gunzip "$assemble_genome_fastagz_name"
      assemble_genome_fastagz_name="${assemble_genome_fastagz_name%.gz}"
    fi
    mv $assemble_genome_fastagz_name assemble_genome.fasta
    ls

    if [ "${#scaff_R1_fastqgz[@]}" != "${#scaff_R2_fastqgz[@]}" ]; then
        exit "number of forward and reverse reads are not equal"
    fi

    for i in ${!scaff_R1_fastqgz[@]}
    do
        dx download "${scaff_R1_fastqgz[$i]}" -o "${scaff_R1_fastqgz_name[$i]}"
        if [[ "${scaff_R1_fastqgz_name[$i]}" =~ \.gz$ ]]; then
            gzip -dc "${scaff_R1_fastqgz_name[$i]}" > read1_$i.fastq
        else
            mv "${scaff_R1_fastqgz_name[$i]}" read1_$i.fastq
        fi
        rm "${scaff_R1_fastqgz_name[$i]}"
        if [[ "$is_raw" == 'true' ]]; then
		/usr/bin/scaff-bin/scaff_BC-reads-1 read1_${i}.fastq read_${i}-BC_1.fastq read_${i}-BC.name
		rm read1_${i}.fastq
	fi
    done

    for i in ${!scaff_R2_fastqgz[@]}
    do
        dx download "${scaff_R2_fastqgz[$i]}" -o "${scaff_R2_fastqgz_name[$i]}"
        if [[ "${scaff_R2_fastqgz_name[$i]}" =~ \.gz$ ]]; then
            gzip -dc "${scaff_R2_fastqgz_name[$i]}" > read2_$i.fastq
        else
            mv "${scaff_R2_fastqgz_name[$i]}" read2_$i.fastq
        fi
        rm "${scaff_R2_fastqgz_name[$i]}"
	if [[ "$is_raw" == 'true' ]]; then
		/usr/bin/scaff-bin/scaff_BC-reads-2 read_${i}-BC.name read2_${i}.fastq read_${i}-BC_2.fastq
		rm read2_${i}.fastq
	fi
    done

    if [[ "$is_raw" == 'true' ]]; then
	cat read_*BC_1.fastq  > read-BC_1.fastq
	rm read_*BC_1.fastq
	cat read_*BC_2.fastq > read-BC_2.fastq
	rm read_*BC_2.fastq
    else
        # reads are already processed.
	ls -a
	cat read1_*.fastq > read-BC_1.fastq
	rm read1_*.fastq
	ls -a
        cat read2_*.fastq > read-BC_2.fastq
	rm read2_*.fastq
	ls -a
    fi

    if [[ "$mapper_choice" == 'BWA' ]]; then
        mapper_choice='bwa'
    elif [[ "$mapper_choice" == 'SMALT' ]]; then
        mapper_choice='smalt'
    fi

    if [[ -n "$mapping_file" ]]; then
        mkdir temp_mapping_file
        mapping_file_name=$(dx describe "$mapping_file" --name)
        if [ ${mapping_file_name: -4} == ".bam" ]; then
            dx download "$mapping_file" -o temp_mapping_file/mapping.bam
            samtools view temp_mapping_file/mapping.bam > temp_mapping_file/mapping.sam
        elif [ ${mapping_file_name: -4} == ".sam" ]; then
            dx download "$mapping_file" -o temp_mapping_file/mapping.sam
        else
            exit "The extension of mapping file is neither sam or bam"
        fi
    fi

    echo "scaffolding"
    if [[ -n "$mapping_file" ]]; then
        /usr/bin/scaff10x -nodes `nproc` $alignment_option -sam temp_mapping_file/mapping.sam -align "$mapper_choice" assemble_genome.fasta read-BC_1.fastq read-BC_2.fastq scaffolds.fasta
    else
        /usr/bin/scaff10x -nodes `nproc` $alignment_option -align "$mapper_choice" assemble_genome.fasta read-BC_1.fastq read-BC_2.fastq scaffolds.fasta
    fi

    if [[ "$disable_break10x" == 'false' ]]; then
        echo "break point"
        /usr/bin/break10x -nodes `nproc` $break10x_option scaffolds.fasta read-BC_1.fastq read-BC_2.fastq scaffolds-break.fasta scaffolds-break.name
        gzip scaffolds-break.fasta
        breakpoint=$(dx upload scaffolds-break.fasta.gz --brief)
        breakpoint_name=$(dx upload scaffolds-break.name --brief)
        dx-jobutil-add-output breakpoint "$breakpoint" --class=file
        dx-jobutil-add-output breakpoint_name "$breakpoint_name" --class=file
    fi

    ls -ltr

    if [[ $is_raw == 'true' ]]; then
	gzip read-BC_1.fastq
	gzip read-BC_2.fastq
	read_bc1=$(dx upload read-BC_1.fastq.gz --brief)
	read_bc2=$(dx upload read-BC_2.fastq.gz --brief)
	dx-jobutil-add-output read_bc1 "$read_bc1" --class=file
	dx-jobutil-add-output read_bc2 "$read_bc2" --class=file
    fi
    gzip scaffolds.fasta
    scaffold=$(dx upload scaffolds.fasta.gz --brief)
    dx-jobutil-add-output scaffold "$scaffold" --class=file

    for i in "${!other_outputs[@]}"; do
        dx-jobutil-add-output other_outputs "${other_outputs[$i]}" --class=array:file
    done
}
