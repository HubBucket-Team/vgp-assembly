#!/usr/bin/env python
# bcftools_merge 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

from __future__ import print_function
import os
import dxpy
import multiprocessing
import subprocess

import dx_utils

VCF_FOFN = 'input_vcfs.fofn'

@dxpy.entry_point('main')
def main(**job_inputs):
    input_vcfs = [dx_utils.download_and_gunzip_file(f, skip_decompress=True) for f in job_inputs['input_vcfs']]
    input_ref = dx_utils.download_and_gunzip_file(job_inputs['ref_fasta'])
    
    # create index files for inputs
    dx_utils.run_cmd(['samtools', 'faidx', input_ref])
    map(dx_utils.run_cmd, ['tabix {0}'.format(vcf) for vcf in input_vcfs])
    with open(VCF_FOFN, 'w') as fh:
        fh.write('\n'.join(input_vcfs))

    # get the bcftools version and help doc
    cmd = ['bcftools', '--help']
    dx_utils.run_cmd(cmd)

    output_prefix = job_inputs.get('output_prefix', '')
    output_bcf = output_prefix + 'concat' + '.bcf'
    # concatenate the bcf/vcf files
    concat_cmd = ['bcftools', 'concat', '-f', VCF_FOFN]
    view_cmd = ['bcftools', 'view', '-Ou', '-e\'type="ref"\'']
    norm_cmd = ['bcftools', 'norm', '-Ob', '-f', input_ref, '-o', 
                output_bcf, '--threads={0}'.format(multiprocessing.cpu_count())]
    # run the commands
    dx_utils.run_pipe(concat_cmd, view_cmd, norm_cmd)

    # index the concatenated bcf file
    dx_utils.run_cmd(['bcftools', 'index', output_bcf])

    # call consensus
    output_fasta = output_prefix + 'consensus.fasta'
    consensus_filter = 'QUAL>1 && (GT="AA" || GT="Aa")'
    consensus_cmd = ['bcftools', 'consensus', '-i', consensus_filter,
                     '-Hla', '-f', input_ref, output_bcf]
    dx_utils.run_pipe(consensus_cmd, outputFile=output_fasta) 


    # save the changes to vcf
    output_vcf = output_prefix + 'changes.vcf.gz'
    vcf_cmd = ['bcftools', 'view', '-i', consensus_filter, '-Oz',
           '--threads={0}'.format(multiprocessing.cpu_count()), output_bcf]
    dx_utils.run_pipe(vcf_cmd, outputFile=output_vcf) 

    consensus_link = dx_utils.gzip_and_upload(output_fasta)
    print(consensus_link)
    output = {}
    output['consensus_fasta'] = consensus_link
    output['consensus_vcf'] = dxpy.dxlink(dxpy.upload_local_file(output_vcf))

    return output

dxpy.run()
