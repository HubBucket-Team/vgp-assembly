#!/usr/bin/env python
# blasr 3.1.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os
import subprocess
import multiprocessing
from itertools import izip
import dxpy
import dx_utils


@dxpy.entry_point('map_reads')
def map_reads(reads, ref_genome, ref_genome_mmi, reads_index=None):
    # Download inputs
    reads = dx_utils.download_and_gunzip_file(reads)
    if reads_index is None:
        # generate index
        cmd = ['/opt/smrtlink/smrtcmds/bin/pbindex', reads]
        dx_utils.run_cmd(cmd)
    else:
        dx_utils.download_and_gunzip_file(reads_index)
    ref_genome = dx_utils.download_and_gunzip_file(ref_genome)
    ref_genome_mmi = dx_utils.download_and_gunzip_file(ref_genome_mmi)
    prefix = os.path.splitext(reads)[0]

    # Convert bam to fastq
    cmd = ['/opt/smrtlink/smrtcmds/bin/bam2fastq', reads, '-o', prefix, '-c', '1']
    dx_utils.run_cmd(cmd)

    # Call minimap2
    cmd = ['minimap2', '-t', str(multiprocessing.cpu_count()), '-L', '--MD', '-ax', 'map-pb',
        '-R', '@RG\\tID:{0}\\tPL:PACBIO\\tPU:{0}\\tLB:{0}\\tSM:{0}'.format(prefix), ref_genome_mmi,
         '{0}.fastq.gz'.format(prefix)
    ]
    print subprocess.list2cmdline(cmd)
    minimap_proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)

    cmd = ['samtools', 'view', '-Sbu', '-']
    samtools_view_proc = subprocess.Popen(cmd, stdin=minimap_proc.stdout, stdout=subprocess.PIPE)

    temp_bam_fn = 'temp.bam'
    cmd = ['samtools', 'sort', '-f', '-@', str(multiprocessing.cpu_count()), '-', temp_bam_fn]
    samtools_sort_proc = subprocess.Popen(cmd, stdin=samtools_view_proc.stdout)
    samtools_sort_proc.communicate()

    # Now run PBBamify
    ofn = '{0}.mapped.bam'.format(prefix)
    cmd = ['pbbamify', '--input={0}'.format(temp_bam_fn), '--output={0}'.format(ofn), ref_genome, reads]
    dx_utils.run_cmd(cmd)

    # Create index
    cmd = ['samtools', 'index', ofn]
    dx_utils.run_cmd(cmd)

    return {'mapped_reads': dxpy.dxlink(dxpy.upload_local_file(ofn)),
            'mapped_reads_index': dxpy.dxlink(dxpy.upload_local_file(ofn + '.bai'))}


@dxpy.entry_point('run_minimap_index')
def run_minimap_index(ref_genome):
    ref_genome = dx_utils.download_and_gunzip_file(ref_genome)
    ofn = os.path.splitext(ref_genome)[0] + '.mmi'

    cmd = ['minimap2', '-t', str(multiprocessing.cpu_count()), '-d', ofn, ref_genome]
    dx_utils.run_cmd(cmd)

    return {'ref_genome_mmi': dxpy.dxlink(dxpy.upload_local_file(ofn))}


@dxpy.entry_point('main')
def main(**job_inputs):
    # If we weren't provided a blasr index for the reference, generate it.
    if 'ref_genome_mmi' not in job_inputs:
        minimap_index_job = dxpy.new_dxjob({'ref_genome': job_inputs['ref_genome']}, 'run_minimap_index')
        job_inputs['ref_genome_mmi'] = minimap_index_job.get_output_ref('ref_genome_mmi')
    output = {'ref_genome_mmi': job_inputs['ref_genome_mmi']}

    # Check if BAM indices were provided
    if 'read_indices' not in job_inputs:
        job_inputs['read_indices'] = [None] * len(job_inputs['reads'])

    jobs = []
    for input_bam, input_bai in izip(job_inputs['reads'], job_inputs['reads_indices']):
        map_reads_input = {
            'reads': input_bam, 
            'reads_index': input_bai,
            'ref_genome': job_inputs['ref_genome'], 
            'ref_genome_mmi': job_inputs['ref_genome_mmi']
        }
        job = dxpy.new_dxjob(map_reads_input, 'map_reads')
        jobs.append(job)

    output['bam_files'] = [j.get_output_ref('mapped_reads') for j in jobs]
    output['bai_files'] = [j.get_output_ref('mapped_reads_index') for j in jobs]

    return output

dxpy.run()
