#!/bin/bash
# freebayes-sp2 0.0.1
# Generated by dx-app-wizard.

set -x -e -o pipefail

# one_freebayes(){
#     sudo chmod 777 /usr/bin/samtools
#     sudo chmod 777 /usr/bin/freebayes
#     sudo chmod 777 /usr/bin/bcftools
#     mkdir -p out/vcf
#     mkdir -p vcf
#     dx-download-all-inputs --except ref 
#     dx cat "$ref" | zcat > ${ref_name%.gz}
#     mv "$fai_path" .

#     mv "$bai_path" in/bam/
#     if [ -z "$freebayes_op" ]; then
#         cat "${bed_path}" | awk -v bam="$bam_path" -v ref=${ref_name%.gz} '{print "freebayes --bam "bam" --region \""$1":"$2"-"$3"\" --fasta-reference "ref" --vcf \"vcf/"$1"_"$2"-"$3".vcf\""}' | parallel --gnu -j $(nproc) -k
#     else
#         cat "${bed_path}" | awk -v bam="$bam_path" -v ref=${ref_name%.gz} -v freebayes_op="$freebayes_op" '{print "freebayes --bam "bam" --region \""$1":"$2"-"$3"\" --fasta-reference "ref" "freebayes_op" --vcf \"vcf/"$1"_"$2"-"$3".vcf\""}' | parallel --gnu -j $(nproc) -k
#     fi

#     cd vcf 
#     tar -cvf vcf.tar *
#     mv vcf.tar ~/out/vcf
#     cd ~
#     dx-upload-all-outputs --parallel
# }

# merge_vcf(){
#     mkdir vcf
#     sudo chmod 777 /usr/bin/samtools
#     sudo chmod 777 /usr/bin/freebayes
#     sudo chmod 777 /usr/bin/bcftools
#     dx-download-all-inputs --except ref 
#     cd in/vcf
#     for folder in $(ls -d */); do
#         tar -xvf $folder/*.tar -C ~/vcf
#     done
#     cd ~
#     dx cat "$ref" | zcat > ${ref_name%.gz}
#     mv "$fai_path" .

#     bcftools concat -f "$concat_list_path" | bcftools view -Ou -e'type="ref"' | bcftools norm -Ob -f ${ref_name%.gz} -o ${ref_prefix}.bcf --threads $(nproc)
#     bcftools index ${ref_prefix}.bcf
        
#     pl_bcf=$(dx upload ${ref_prefix}.bcf --brief)
#     dx-jobutil-add-output pl_bcf "$pl_bcf" --class=file


#     bcftools view $bcftools_op -i "$inclusion_expression" --threads=$(nproc)  ${ref_prefix}.bcf > ${ref_prefix}_changes.vcf.gz

#     pl_vcf_changes=$(dx upload ${ref_prefix}_changes.vcf.gz --brief)
#     dx-jobutil-add-output pl_vcf_changes "$pl_vcf_changes" --class=file

#     bcftools index ${ref_prefix}_changes.vcf.gz
#     bcftools consensus -Hla -f ${ref_name%.gz} ${ref_prefix}_changes.vcf.gz > ${ref_prefix}_pl.fa
#     gzip ${ref_prefix}_pl.fa
        
#     pl_fasta=$(dx upload ${ref_prefix}_pl.fa.gz --brief)
#     dx-jobutil-add-output pl_fasta "$pl_fasta" --class=file
# }

main() {

    sudo chmod 777 /usr/bin/samtools
    sudo chmod 777 /usr/bin/freebayes
    sudo chmod 777 /usr/bin/bcftools
	
    echo "Value of reference: '$ref'"
    echo "Value of bam: '$bam'"
    echo "Value of bam: '$bai'"
    echo "Value of csv_10x: '$csv_10x'"
    echo "Value of freebayes_op: '$freebayes_op'"
    echo "Value of skip_coverage_fold: '$skip_coverage_fold'"
    echo "Value of bcftools_op: '$bcftools_op'"
    echo "Value of new_vgp_extension: '$new_vgp_extension'"

    # echo "Value of N_job: '$n_job'"

 #   if [ "$n_job" -eq 1 ]; then
    dx-download-all-inputs --except ref # get bam and bai
    mv "$bai_path" in/bam/
#    fi
    skip_coverage=$(python calculate_coverage_fold.py "$csv_10x_path" $skip_coverage_fold)
    echo 'skip_coverage ' $skip_coverage

    dx cat "$ref" | zcat > ${ref_name%.gz}

    if ! [ -e ${ref_name%.gz}.fai ]; then
        samtools faidx ${ref_name%.gz}
        awk '{print $1 "\t" $2}' ${ref_name%.gz}.fai > ${ref_name%.gz}.len
    fi

	if ! [ -e ${ref_name}.gaps ]; then
		java -jar /opt/java/fastaGetGaps.jar ${ref_name%.gz} ${ref_name%.gz}.gaps
		awk -F "\t" '$4>3 {print $1"\t"$2"\t"$3}' ${ref_name%.gz}.gaps > ${ref_name%.gz}.gaps.bed
		bedtools complement -i ${ref_name%.gz}.gaps.bed -g ${ref_name%.gz}.len | awk '{print $0"\t"($3-$2)}' > ${ref_name%.gz}.bed
        cat ${ref_name%.gz}.bed | awk '{print "vcf/"$1"_"$2"-"$3".vcf"}' > concat_list.txt
	    sort -k4 -nr ${ref_name%.gz}.bed > contigs_sorted.bed # change to shuffle if unstable
	fi
    
    # distribution vs single job 
    # if [ "$n_job" -gt 1 ]; then
    #     fai=$(dx upload ${ref_name%.gz}.fai --brief)
    #     python split_job.py contigs_sorted.bed "$n_job"
    #     for i in contigs_sorted_*.bed; do
    #         bed=$(dx upload $i --brief)
    #         one_freebayes_job+=($(dx-jobutil-new-job -ibam="$bam" -ibai="$bai" -iref="$ref" -ifai="$fai" -imax="$max" -ifreebayes_op="$freebayes_op" -ibed="$bed" one_freebayes))
    #     done
    #     all_bed_list=$(dx upload concat_list.txt --brief)
    #     for one_freebayes_job in "${one_freebayes_job[@]}"; do
    #         merge_vcf_args+=(-ivcf="$one_freebayes_job":vcf)
    #     done
    #     concat_list=$(dx upload concat_list.txt --brief)
    #     merge_vcf=$(dx-jobutil-new-job "${merge_vcf_args[@]}" -iref="$ref" -ifai="$fai" -iconcat_list=$all_bed_list -iinclusion_expression="$inclusion_expression" -ibcftools_op="$bcftools_op" merge_vcf)
    #     dx-jobutil-add-output pl_bcf "$merge_vcf":pl_bcf --class=jobref
    #     dx-jobutil-add-output pl_vcf_changes "$merge_vcf":pl_vcf_changes --class=jobref
    #     dx-jobutil-add-output pl_fasta "$merge_vcf":pl_fasta --class=jobref

    # else

    if ! [ -e vcf ]; then
    	mkdir vcf
        if [ -z "$freebayes_op" ]; then
            cat contigs_sorted.bed | awk -v bam="$bam_path" -v ref=${ref_name%.gz} -v skip_coverage="$skip_coverage" '{print "freebayes --bam "bam" --region \""$1":"$2"-"$3"\" --fasta-reference "ref" --skip-coverage "skip_coverage" --vcf \"vcf/"$1"_"$2"-"$3".vcf\""}' | parallel --gnu -j $(nproc) -k
        else
            cat contigs_sorted.bed | awk -v bam="$bam_path" -v ref=${ref_name%.gz} -v skip_coverage="$skip_coverage" -v freebayes_op="$freebayes_op" '{print "freebayes --bam "bam" --region \""$1":"$2"-"$3"\" --fasta-reference "ref" --skip-coverage "skip_coverage" "freebayes_op" --vcf \"vcf/"$1"_"$2"-"$3".vcf\""}' | parallel --gnu -j $(nproc) -k
        fi
    fi

	bcftools concat -f concat_list.txt | bcftools view -Ou -e'type="ref"' | bcftools norm -Ob -f ${ref_name%.gz} -o ${ref_prefix}.bcf --threads $(nproc)
	bcftools index ${ref_prefix}.bcf
	
    pl_bcf=$(dx upload ${ref_prefix}.bcf --brief)
    dx-jobutil-add-output pl_bcf "$pl_bcf" --class=file

    bcftools view $bcftools_op -i 'QUAL>1 && (GT="AA" || GT="Aa") && INFO/DP>5' --threads=$(nproc)  ${ref_prefix}.bcf > ${ref_prefix}_changes.vcf.gz

    pl_vcf_changes=$(dx upload ${ref_prefix}_changes.vcf.gz --brief)
    dx-jobutil-add-output pl_vcf_changes "$pl_vcf_changes" --class=file

	bcftools index ${ref_prefix}_changes.vcf.gz
	bcftools consensus -Hla -f ${ref_name%.gz} ${ref_prefix}_changes.vcf.gz > ${ref_prefix}_pl.fasta
    output_fasta=$(python extension_replacement.py ${ref_prefix}_pl.fasta ${new_vgp_extension})
    mv ${ref_prefix}_pl.fasta "$output_fasta"
	gzip "$output_fasta"
	
    pl_fasta=$(dx upload "${output_fasta}.gz" --brief)
    dx-jobutil-add-output pl_fasta "$pl_fasta" --class=file
    # fi
     	
}
