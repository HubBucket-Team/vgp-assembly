#!/usr/bin/env python
# blasr 0.0.1 test suite
# Generated by dx-app-wizard.
import os
import unittest
import time
import json

import dxpy
import dxpy.app_builder

from dxpy.exceptions import DXAPIError

src_dir = os.path.join(os.path.dirname(__file__), "..")
test_resources_dir = os.path.join(src_dir, "test", "resources")

DX_PROJECT_ID = "project-BzQf6k80V3bJk7x0yv6z82j7"
DX_PROJ_OBJ = dxpy.DXProject(DX_PROJECT_ID)
ARTIFACTS_FOLDER = "/Failed_Artifacts"

def make_base_input():
    base_input = {
        "genome_fastagz": {"$dnanexus_link": "file-B6ZY7VG2J35Vfvpkj8y0KZ01"}
        }
    return base_input

class Testminimap2_longread(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # Upload the app to the Platform.
        bundled_resources = dxpy.app_builder.upload_resources(src_dir, project=DX_PROJECT_ID)
        try:
            app_name = os.path.basename(os.path.abspath(src_dir)) + "_test"
        except OSError:
            app_name = "test_app"
        applet_basename = app_name + "_" + str(int(time.time()))
        cls.applet_id, _ignored_applet_spec = dxpy.app_builder.upload_applet(
            src_dir, bundled_resources, override_name=applet_basename, project=DX_PROJECT_ID)

    @classmethod
    def tearDownClass(cls):
        # Clean up by removing the app we created.
        try:
            dxpy.api.container_remove_objects(DX_PROJECT_ID, {"objects": [cls.applet_id]})
        except DXAPIError as e:
            print "Error removing %s during cleanup; ignoring." % (cls.applet_id,)
            print e

    def setUp(self):
        self.base_input = make_base_input()
        self.testname = "minimap2_longread_" + self.id().split(".")[-1]
        self.tempdirdx = "/Minimap2/minimap2_longread_{testname}_{curr_time}".format(
            testname=self.testname, curr_time=str(time.time()))
        DX_PROJ_OBJ.new_folder(self.tempdirdx, parents=True)


    def tearDown(self):
        DX_PROJ_OBJ.remove_folder(self.tempdirdx, recurse=True, force=True)

    def test_pacb_input(self):
        """
        Tests the app with a basic input.
        """
        job_input = self.base_input
        job_input["reads"] = [{"$dnanexus_link": "file-FPY0BY80pbJvg49Z3k4zZp71"}]
        job_input["reads_indices"] = [{"$dnanexus_link": "file-FPY096j0VvqbBk3Y5367XbJp"}]
        job_input["datatype"] = "PacBio"
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx, name=self.testname, project=DX_PROJECT_ID)
        print "Waiting for %s to complete" % (job.get_id(),)
        try:
            job.wait_on_done()
            print json.dumps(job.describe()["output"])
        except Exception:
            DX_PROJ_OBJ.move_folder(self.tempdirdx, ARTIFACTS_FOLDER)
            raise

    def test_ont_input(self):
        """
        Tests the app with a basic input.
        """
        job_input = self.base_input
        job_input["reads"] = [{"$dnanexus_link": "file-FPXx7v00x99J3b743k9z93x8"}]
        job_input["datatype"] = "ONT"
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx, name=self.testname, project=DX_PROJECT_ID)
        try:
            job.wait_on_done()
            print json.dumps(job.describe()["output"])
        except Exception:
            DX_PROJ_OBJ.move_folder(self.tempdirdx, ARTIFACTS_FOLDER)
            raise

    def test_datatype_compatbility(self):
        """
        Tests the app with a basic input.
        """
        job_input = self.base_input
        # this is a subreads.bam file
        job_input["reads"] = [
            {"$dnanexus_link": "file-FPY0BY80pbJvg49Z3k4zZp71"},
            {"$dnanexus_link": "file-FPY0BX802J4jybZVJf0gy272"}
            ]
        job_input["reads_indices"] = [
            {"$dnanexus_link": "file-FPY096j0VvqbBk3Y5367XbJp"},
            {"$dnanexus_link": "file-FPY096j0G03Gg49Z3k4zZg1Q"}
            ]
        # this is an incompatible datatype
        job_input["datatype"] = "ONT"
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx, name=self.testname, project=DX_PROJECT_ID)
        print "Waiting for %s to complete" % (job.get_id(),)
        try:
            job.wait_on_done()
            print json.dumps(job.describe()["output"])
            # if job continued, fail this test
            raise Exception("Job should have failed with DXAppError")
        except dxpy.exceptions.AppError:
            pass

    def test_pacb_subjobs(self):
        job_input = self.base_input
        # these are 10GB files
        job_input["reads"] = [
            {"$dnanexus_link": "file-FPY0BY80pbJvg49Z3k4zZp71"},
            {"$dnanexus_link": "file-FPY0BX802J4jybZVJf0gy272"}
            ]
        job_input["reads_indices"] = [
            {"$dnanexus_link": "file-FPY096j0VvqbBk3Y5367XbJp"},
            {"$dnanexus_link": "file-FPY096j0G03Gg49Z3k4zZg1Q"}
            ]
        job_input["datatype"] = "PacBio"
        job_input["chunk_size"] = 9
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx, name=self.testname, project=DX_PROJECT_ID)
        print "Waiting for %s to complete" % (job.get_id(),)
        try:
            job.wait_on_done()
            output = job.describe()["output"]
            # check that 2 chunks were run and 2 files are output
            mappings_files = output["mapped_reads"]
            self.assertTrue(len(mappings_files) > 1)
        except dxpy.exceptions.AppError:
            DX_PROJ_OBJ.move_folder(self.tempdirdx, ARTIFACTS_FOLDER)
            raise

    def test_ont_subjobs(self):
        job_input = self.base_input
        # these are 40MB files
        job_input["reads"] = [
            {"$dnanexus_link": "file-FPXx7v00x99J3b743k9z93x8"},
            {"$dnanexus_link": "file-FPXxJXQ0zYzGg49Z3k4zKFP7"}
                              ]
        job_input["datatype"] = "ONT"
        job_input["chunk_size"] = 1
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx,
                                                name=self.testname, project=DX_PROJECT_ID)
        print "Waiting for %s to complete" % (job.get_id(),)
        try:
            job.wait_on_done()
            output = job.describe()["output"]
            # check that 2 chunks were run and 2 files are output
            mappings_files = output["mapped_reads"]
            self.assertTrue(len(mappings_files) > 1)
        except dxpy.exceptions.AppError:
            DX_PROJ_OBJ.move_folder(self.tempdirdx, ARTIFACTS_FOLDER)
            raise
    
    def test_duplicate_outputs(self):
        """
        If bax files are converted to BAM or FASTA, the output will be of the
        format: [prefix].[part_number].[ext]
        Since these are grouped together in mapping, we want to make sure
        output files don't all have the name [prefix].mapped.bam
        """
        job_input = self.base_input
        # these are 40MB files
        job_input["reads"] = [
            {"$dnanexus_link": "file-BXqbQx803GZK2FBqzb40yvQ1"},
            {"$dnanexus_link": "file-BXqbV1j03GZFyYv3zk4BjZxZ"}
                              ]
        job_input["datatype"] = "PacBio"
        job_input["chunk_size"] = 1
        job = dxpy.DXApplet(self.applet_id).run(job_input, folder=self.tempdirdx,
                                                name=self.testname, project=DX_PROJECT_ID)
        print "Waiting for %s to complete" % (job.get_id(),)
        try:
            job.wait_on_done()
            output = job.describe()["output"]
            # check that 2 files are output
            mappings_files = output["mapped_reads"]

            # check that both files don't have the same name
            self.assertTrue(len(mappings_files) == 2)
            filename1 = dxpy.DXFile(mappings_files[0]).describe()['name']
            filename2 = dxpy.DXFile(mappings_files[1]).describe()['name']
            self.assertTrue(filename1 != filename2)
        except dxpy.exceptions.AppError:
            DX_PROJ_OBJ.move_folder(self.tempdirdx, ARTIFACTS_FOLDER)
            raise

if __name__ == '__main__':
    unittest.main()
