#!/bin/bash
# purge_dups 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
set -x -e -o pipefail
main() {

    echo "Value of ref_fastagz: '$ref_fastagz'"
    echo "Value of raw_reads_pacbio_fastagz: '${raw_reads_pacbio_fastagz[@]}'"
    echo "Value of spid: '$spid'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$ref_fastagz" -o ref.fa
    mkdir -p pacb_fofn
    cd pacb_fofn
    for i in ${!raw_reads_pacbio_fastagz[@]}
    do
        dx download "${raw_reads_pacbio_fastagz[$i]}" 
    done
    ls  $PWD/* > ~/pb_input
    cd ~
    run_purge_dups.py config.txt /purge_dups/src $spid


    exit 1

    primary_fastagz=$(dx upload primary_fastagz --brief)
    dup_fastagz=$(dx upload dup_fastagz --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output primary_fastagz "$primary_fastagz" --class=file
    dx-jobutil-add-output dup_fastagz "$dup_fastagz" --class=file
    for i in "${!auxillary_files[@]}"; do
        dx-jobutil-add-output auxillary_files "${auxillary_files[$i]}" --class=array:file
    done
}
