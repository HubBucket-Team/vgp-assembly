#!/bin/bash
# wtdbg 1.2.8
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_files: '${input_files[@]}'"
    echo "Value of input_files_names '${input_files_name[@]}'"
    echo "Value of corrected_reads: '$corrected_reads'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    > input_reads.fasta
    for i in ${!input_files[@]}
    do
        cmd="dx cat '${input_files[$i]}' "
        if [[ ${input_files_name[$i]} == *.gz ]]; then
            cmd="$cmd | gunzip -c "
        elif [[ ${input_files_name[$i]}  == *.bz2 ]]; then
            cmd="$cmd | bunzip2 -c"
        elif [[ ${input_files_name[$i]}  == *.xz ]]; then
            cmd="$cmd | xz -dc "
        fi
        echo "Running $cmd"
        eval $cmd >> input_reads.fasta
    done

    inputType="-i"
    if [ $corrected_reads == "true" ]; then
        inputType="-I"
    fi
    numCores=`grep -c ^processor /proc/cpuinfo`

    wtdbg-1.2.8 -f -t $numCores $inputType input_reads.fasta -fo dbg -S 2 --edge-min 2 --rescue-low-cov-edges
    if [ ! -e dbg.ctg.lay ]; then
        dx-jobutil-report-error "Error: assembly failed, no layout generated"
        exit 1
    fi
    wtdbg-cns -f -t $numCores -i dbg.ctg.lay -o dbg.ctg.lay.fasta
    if [ ! -e dbg.ctg.lay.fasta ]; then
        dx-jobutil-report-error "Error: consensus failed, no fasta generated"
    else
        gzip dbg.ctg.dot
        gzip dbg.ctg.lay.fasta
    fi

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output_contigs=$(dx upload dbg.ctg.lay.fasta.gz --brief)
    output_dot=$(dx upload dbg.ctg.dot.gz --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_contigs "$output_contigs" --class=file
    dx-jobutil-add-output output_dot  "$output_dot"  --class=file
}
